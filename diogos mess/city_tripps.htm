<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <title>City trips</title>
    <!-- Create a div where the graph will take place -->
    <div id="my_dataviz"></div>
</head>

<body>

    <script>
        // set the dimensions and margins of the graph
        var margin = { top: 50, right: 80, bottom: 200, left: 100 },
            width = 1460 - margin.left - margin.right,
            height = 900 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var station_to_city_map;

        // Load the data of the stations and city
        d3.csv("station.csv").then(function (data) {

            // load cities
            var cities = data.map(function (d) {
                return d.city;
            });

            // load stations
            var stations = data.map(function (d) {
                return d.name;
            });

            station_to_city_map = cities.map(function (city, index) {
                return {
                    city: city,
                    station: stations[index]
                };
            });

            console.log(station_to_city_map)

            // load the data of the trips
            d3.csv("trip.csv").then(function (tripData) {

                // Data processing for outgoing trips
                var start_station_counts = {};
                tripData.forEach(function (d) {
                    start_station_counts[d.start_station_name] = (start_station_counts[d.start_station_name] || 0) + 1;
                });

                // Data processing for incoming trips
                var end_station_counts = {};
                tripData.forEach(function (d) {
                    end_station_counts[d.end_station_name] = (end_station_counts[d.end_station_name] || 0) + 1;
                });

                // Create a map for both incoming and outgoing counts for each city
                var city_trips_map = {};
                station_to_city_map.forEach(function (mapping) {
                    var city = mapping.city;
                    var station = mapping.station;

                    // If the station has outgoing trips, add to the city count
                    if (start_station_counts[station]) {
                        city_trips_map[city] = city_trips_map[city] || { outgoing: 0, incoming: 0 };
                        city_trips_map[city].outgoing += start_station_counts[station];
                    }

                    // If the station has incoming trips, add to the city count
                    if (end_station_counts[station]) {
                        city_trips_map[city] = city_trips_map[city] || { outgoing: 0, incoming: 0 };
                        city_trips_map[city].incoming += end_station_counts[station];
                    }
                });

                // Extract city names and corresponding counts
                var cities = Object.keys(city_trips_map);
                var counts = cities.map(function (city) {
                    return city_trips_map[city];
                });

                // Set up scales
                var x = d3.scaleBand()
                    .domain(cities)
                    .range([0, width])
                    .padding([0.2]);

                var y = d3.scaleLinear()
                    .domain([0, d3.max(counts, function (d) { return Math.max(d.outgoing, d.incoming); })])
                    .range([height, 0]);

                // Color palette
                var color = d3.scaleOrdinal()
                    .domain(["outgoing", "incoming"])
                    .range(['#e41a1c', '#377eb8']);

                // Add X axis
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x).tickSize(0)).selectAll("text")
                    .attr("transform", "translate(-10,0)rotate(-45)")
                    .style("text-anchor", "end");

                // Add Y axis
                svg.append("g")
                    .call(d3.axisLeft(y));


                // Show the bars for outgoing trips
                var outgoingBars = svg.append("g")
                    .selectAll(".outgoing-bar")
                    .data(cities.map(function (city) {
                        return { city: city, value: city_trips_map[city].outgoing, type: "outgoing" };
                    }))
                    .enter().append("rect")
                    .attr("class", "outgoing-bar") // Add a class for selection
                    .attr("x", function (d) { return x(d.city); })
                    .attr("y", function (d) { return y(d.value); })
                    .attr("width", x.bandwidth() / 2)
                    .attr("height", function (d) { return height - y(d.value); })
                    .attr("fill", function (d) { return color(d.type); });

                // Show the value labels for incoming trips
                svg.selectAll(".outgoing-bar-label")
                    .data(cities.map(function (city) {
                        return { city: city, value: city_trips_map[city].outgoing, type: "outgoing" };
                    }))
                    .enter().append("text")
                    .attr("class", "outgoing-bar-label")
                    .text(function (d) { return d.value; })
                    .attr("x", function (d) { return x(d.city) + 0.25 * x.bandwidth(); })
                    .attr("y", function (d) { return y(d.value) - 5; })
                    .attr("font-family", "sans-serif")
                    .attr("font-size", "14px")
                    .attr("fill", "black")
                    .attr("text-anchor", "middle");

                // Show the bars for incoming trips
                var incomingBars = svg.append("g")
                    .selectAll(".incoming-bar")
                    .data(cities.map(function (city) {
                        return { city: city, value: city_trips_map[city].incoming, type: "incoming" };
                    }))
                    .enter().append("rect")
                    .attr("class", "incoming-bar") // Add a class for selection
                    .attr("x", function (d) { return x(d.city) + x.bandwidth() / 2; })
                    .attr("y", function (d) { return y(d.value); })
                    .attr("width", x.bandwidth() / 2)
                    .attr("height", function (d) { return height - y(d.value); })
                    .attr("fill", function (d) { return color(d.type); });

                // Show the value labels for incoming trips
                svg.selectAll(".incoming-bar-label")
                    .data(cities.map(function (city) {
                        return { city: city, value: city_trips_map[city].incoming, type: "incoming" };
                    }))
                    .enter().append("text")
                    .attr("class", "incoming-bar-label")
                    .text(function (d) { return d.value; })
                    .attr("x", function (d) { return x(d.city) + 0.7 * x.bandwidth(); })
                    .attr("y", function (d) { return y(d.value) - 5; })
                    .attr("font-family", "sans-serif")
                    .attr("font-size", "14px")
                    .attr("fill", "black")
                    .attr("text-anchor", "middle");

                // Add Legend
                var legend = svg.append("g")
                    .attr("transform", "translate(" + (width - 30) + "," + 20 + ")")
                    .selectAll("g")
                    .data(color.domain().slice().reverse())
                    .enter().append("g")
                    .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                legend.append("rect")
                    .attr("width", 18)
                    .attr("height", 18)
                    .attr("fill", color);

                legend.append("text")
                    .attr("x", 24)
                    .attr("y", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "start")
                    .text(function (d) { return d === "outgoing" ? "Outgoing" : "Incoming"; });

                // Add title
                svg.append("text")
                    .attr("x", width / 2)
                    .attr("y", 0 - (margin.top / 2))
                    .attr("text-anchor", "middle")
                    .style("font-size", "20px")
                    .style("text-decoration", "underline")
                    .text("City Trips - Outgoing and Incoming");

                // Add X axis label
                svg.append("text")
                    .attr("transform", "translate(" + (width / 2) + " ," + (height + margin.top + 30) + ")")
                    .style("text-anchor", "middle")
                    .text("Cities");

                // Add Y axis label
                svg.append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 0 - margin.left)
                    .attr("x", 0 - (height / 2))
                    .attr("dy", "1em")
                    .style("text-anchor", "middle")
                    .text("Number of Trips");


            });
        });
    </script>

</body>

</html>