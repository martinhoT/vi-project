<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bikes Over Time</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
</head>

<body>

    <!-- Container for the chart -->
    <div id="chart-container"></div>

    <!-- Dropdown menu for station selection -->
    <div>
        <label for="station-select">Select Station:</label>
        <select id="station-select"></select>
    </div>

    <script>
        d3.csv("status_small.csv").then(function (data) {
            const dateParser = d3.utcParse("%Y-%-m-%-d");

            // Extract unique stations
            const stations = Array.from(new Set(data.map(d => d.station_id)));

            // Populate dropdown menu with stations
            const select = d3.select("#station-select");
            select
                .selectAll("option")
                .data(stations)
                .enter()
                .append("option")
                .text(d => d);

            // Initial station selection
            const selectedStation = select.property("value");

            // Update chart based on selected station
            updateChart(selectedStation);

            // Listen for changes in the dropdown menu
            select.on("change", function () {
                const selectedStation = d3.select(this).property("value");
                updateChart(selectedStation);
            });

            function updateChart(station) {
                let processedData = data
                    .filter(d => d.station_id === station)
                    .map(d => ({
                        date: dateParser(d["date"]),
                        bikes: Math.round(d["bikes_available_avg"]),
                        station: d["station_id"]
                    }));

                // Create or update the line chart
                const margin = { top: 50, right: 20, bottom: 50, left: 50 }; // Increased top and bottom margins
                const width = 900 - margin.left - margin.right;
                const height = 400 - margin.top - margin.bottom;

                // Remove previous chart elements
                d3.select("#chart-container").selectAll("*").remove();

                const svg = d3.select("#chart-container")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                // Create a line chart
                const xScale = d3.scaleTime()
                    .domain(d3.extent(processedData, d => d.date))
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(processedData, d => d.bikes)])
                    .range([height, 0]);

                const line = d3.line()
                    .x(d => xScale(d.date))
                    .y(d => yScale(d.bikes));

                svg.append("path")
                    .datum(processedData)
                    .attr("fill", "none")
                    .attr("stroke", "steelblue")
                    .attr("stroke-width", 1.5)
                    .attr("d", line);

                // Add x and y axis
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(xScale))
                    .append("text")
                    .attr("x", width / 2)
                    .attr("y", 30)
                    .attr("dy", "1em")
                    .style("text-anchor", "middle")
                    .text("Date");

                svg.append("g")
                    .call(d3.axisLeft(yScale))
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -margin.left)
                    .attr("x", -height / 2)
                    .attr("dy", "-2em")
                    .style("text-anchor", "middle")
                    .text("Bikes Available");

                // Add a horizontal red line for the maximum y value
                svg.append("line")
                    .attr("x1", 0)
                    .attr("y1", yScale(d3.max(processedData, d => d.bikes)))
                    .attr("x2", width)
                    .attr("y2", yScale(d3.max(processedData, d => d.bikes)))
                    .attr("stroke", "red")
                    .attr("stroke-width", 1.5)
                    .attr("stroke-dasharray", "4"); // Optional: add a dashed line style


                // Add title
                svg.append("text")
                    .attr("x", width / 2)
                    .attr("y", 0 - (margin.top / 2))
                    .attr("text-anchor", "middle")
                    .style("font-size", "20px")
                    .style("text-decoration", "underline")
                    .text("Bike availability");

                // Add X axis label
                svg.append("text")
                    .attr("transform", "translate(" + (width / 2) + " ," + (height+30) + ")")
                    .style("text-anchor", "middle")
                    .text("Time");

                // Add Y axis label
                svg.append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 0 - margin.left)
                    .attr("x", 0 - (height / 2))
                    .attr("dy", "1em")
                    .style("text-anchor", "middle")
                    .text("Bikes available");
            }
        });
    </script>

</body>

</html>