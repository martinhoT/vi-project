<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <title>City trips</title>
    <!-- Create a div where the graph will take place -->
    <div id="my_dataviz"></div>

</head>

<body>

    <script>
        // load the data
        d3.csv("trip.csv").then(function (data) {
            // get number of outgoing 
            var outgoing_trips = data.map(function (d) {
                return d.start_station_name
            })

            var station_counts = {};

            outgoing_trips.forEach(function (label) {
                station_counts[label] = (station_counts[label] || 0) + 1;
            })


            console.log(outgoing_trips);
            console.log(station_counts);

            // set the dimensions and margins of the graph
            var margin = { top: 30, right: 30, bottom: 70, left: 60 },
                width = 460 - margin.left - margin.right,
                height = 400 - margin.top - margin.bottom;
            totalWidth = 6 * width;
            const parent = d3.create("div");

            // Create the horizontal (x) scale over the total width.
            // X axis
            var x = d3.scaleBand()
                .range([0, width])
                .domain(Object.keys(station_counts))
                .padding(0.2);
            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, 60000])
                .range([height, 0]);


            // Create the svg with the vertical axis. 
            parent.append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)

                .style("position", "absolute")
                .style("pointer-events", "none")
                .style("z-index", 1)
                .append("g")
                .attr("transform", `translate(${margin.left},0)`)
                .call(d3.axisLeft(y).ticks(6))
                .call(g => g.select(".domain").remove())
                .call(g => g.select(".tick:last-of-type text").clone()
                    .attr("x", 3)
                    .attr("text-anchor", "start")
                    .attr("font-weight", "bold")
                    .text("$ Close"));

            // Create a scrolling div containing the area shape and the horizontal axis. 
            const body = parent.append("div")
                .style("overflow-x", "scroll")
                .style("-webkit-overflow-scrolling", "touch");

            const svg = body.append("svg")
                .attr("width", totalWidth)
                .attr("height", height)
                .style("display", "block");

            svg.append("g")
                .attr("transform", `translate(0,${height - margin.bottom})`)
                .call(d3.axisBottom(x).ticks(d3.utcMonth.every(1200 / width)).tickSizeOuter(0));

            // Bars
            svg.append("g")
                .selectAll("mybar")
                .data(Object.entries(station_counts))
                .enter()
                .append("rect")
                .attr("x", function (d) { return x(d[0]); })
                .attr("y", function (d) { return y(d[1]); })
                .attr("width", x.bandwidth())
                .attr("height", function (d) { return height - y(d[1]); })
                .attr("fill", "#69b3a2");


         

        })












    </script>

</body>

</html>