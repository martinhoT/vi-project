<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bikes Usage Histogram</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style>
        /* Add some styling for the table container */
        #table-container {
            max-height: 400px; /* Set the maximum height */
            overflow-y: auto; /* Enable vertical scrolling */
            margin-left: 20px; /* Adjust margin to separate from the histogram */
        }

        /* Add styling for the graph container */
        #my_dataviz {
            flex: 1; /* Let it take up the available space */
        }
    </style>
</head>

<body>
    <!-- Create a div to hold both the graph and the table -->
    <div style="display: flex;">
        <!-- Graph container -->
        <div id="my_dataviz"></div>

        <!-- Table container on the right -->
        <div id="table-container"></div>
    </div>

    <p>
        <label># bins</label>
        <!-- Change input type to "number" and use a dynamically generated dropdown -->
        <select id="nBin"></select>
    </p>

    <script>
        // set the dimensions and margins of the graph
        const margin = { top: 10, right: 30, bottom: 30, left: 80 },
            width = 900 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        const svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

        // Generate options for the dropdown dynamically
        const dropdown = d3.select("#nBin");

        for (let i = 1; i <= 100; i++) {
            dropdown.append("option")
                .attr("value", i)
                .text(i);
        }

        // Set the default selected value
        dropdown.property("value", 7);

        // Load CSV data
        d3.csv("bikes_usage.csv").then(function (data) {
            // Aggregate total duration for each bike
            const aggregatedData = d3.rollup(data, v => d3.sum(v, d => +d.total_duration), d => +d.bike_id);

            let processedData = Array.from(aggregatedData, ([bike, totalDuration]) => ({
                bike: bike,
                total_duration: totalDuration
            }));

            // Sort the data by total_duration
            processedData.sort((a, b) => a.total_duration - b.total_duration);

            // Create initial histogram with default number of bins
            updateHistogram(7);

            // Event listener for the dropdown
            dropdown.on("change", function () {
                const numBins = +this.value;
                updateHistogram(numBins);
            });

            function updateHistogram(numBins) {
                // Create a histogram function
                const histogram = d3.histogram()
                    .value(d => d.total_duration)
                    .domain([d3.min(processedData, d => d.total_duration), d3.max(processedData, d => d.total_duration)])
                    .thresholds(d3.range(d3.min(processedData, d => d.total_duration), d3.max(processedData, d => d.total_duration), (d3.max(processedData, d => d.total_duration) - d3.min(processedData, d => d.total_duration)) / numBins));

                // Bin the data
                const bins = histogram(processedData);

                // Create the scales
                const xScale = d3.scaleLinear()
                    .domain([d3.min(processedData, d => d.total_duration), d3.max(processedData, d => d.total_duration)])
                    .range([0, width]);

                const maxCount = d3.max(bins, bin => bin.length);

                const yScale = d3.scaleLinear()
                    .domain([0, maxCount])
                    .range([height, 0]);

                // Remove existing bars
                svg.selectAll("rect").remove();

                // Create the bars
                const bars = svg.selectAll("rect")
                    .data(bins)
                    .enter()
                    .append("rect")
                    .attr("x", d => xScale(d.x0))
                    .attr("y", d => yScale(d.length)) // Use d.length to get the count of bikes in each bin
                    .attr("width", d => xScale(d.x1) - xScale(d.x0))
                    .attr("height", d => height - yScale(d.length)) // Adjust the height based on the count
                    .style("fill", "#69b3a2");

                // Add event listener to the bars
                bars.on("click", function (event, d) {
                    // Display information in a table
                    displayTable(d);
                });

                // Add x-axis
                svg.append("g")
                    .attr("transform", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                // Remove existing y-axis
                svg.select(".y-axis").remove();

                // Add y-axis
                svg.append("g")
                    .attr("class", "y-axis")
                    .call(d3.axisLeft(yScale));
            }

            // Function to display information in a table
            function displayTable(data) {
                const tableContainer = d3.select("#table-container");
                tableContainer.html(""); // Clear previous content

                const table = tableContainer.append("table").classed("table", true);
                const thead = table.append("thead");
                const tbody = table.append("tbody");

                // Append header row
                thead.append("tr")
                    .selectAll("th")
                    .data(["Bike ID", "Total Duration"])
                    .enter()
                    .append("th")
                    .text(d => d);

                // Append data rows
                const rows = tbody.selectAll("tr")
                    .data(data)
                    .enter()
                    .append("tr");

                // Populate data in the table
                const cells = rows.selectAll("td")
                    .data(d => [d.bike, d.total_duration])
                    .enter()
                    .append("td")
                    .text(d => d);

                // Add some basic styling
                table.attr("border", "1");
                table.style("border-collapse", "collapse");
                table.selectAll("th, td").style("padding", "8px");
                table.selectAll("th").style("background-color", "#f2f2f2");
            }
        });
    </script>
</body>

</html>